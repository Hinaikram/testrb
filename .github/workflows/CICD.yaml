name: Terraform CI/CD for EKS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_S3_BUCKET: ${{ secrets.TF_STATE_S3_BUCKET }}
  TF_STATE_FILE_KEY: ${{ secrets.TF_STATE_FILE_KEY }}
  TF_STATE_DYNAMODB_TABLE: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
  S3_AWS_REGION: ${{ secrets.S3_AWS_REGION }}

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./  # Update this to the root if your Terraform files are there

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3

      - name: Verify Terraform backend variables
        run: |
          echo "TF_STATE_S3_BUCKET: $TF_STATE_S3_BUCKET"
          echo "TF_STATE_FILE_KEY: $TF_STATE_FILE_KEY"
          echo "TF_STATE_DYNAMODB_TABLE: $TF_STATE_DYNAMODB_TABLE"
          echo "S3_AWS_REGION: $S3_AWS_REGION"
          echo "AWS_REGION: $AWS_REGION"
          
          # Sanity checks
          if [ -z "$TF_STATE_S3_BUCKET" ] || \
             [ -z "$TF_STATE_FILE_KEY" ] || \
             [ -z "$TF_STATE_DYNAMODB_TABLE" ] || \
             [ -z "$S3_AWS_REGION" ]; then
            echo "❌ One or more required secrets are missing!"
            exit 1
          else
            echo "✅ All required backend secrets are present."
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init with Backend Config
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_S3_BUCKET" \
            -backend-config="key=$TF_STATE_FILE_KEY" \
            -backend-config="region=$S3_AWS_REGION" \
            -backend-config="dynamodb_table=$TF_STATE_DYNAMODB_TABLE"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Export Terraform Outputs
        id: tf_outputs
        run: |
          echo "ECR_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR
        run: mvn clean install --no-transfer-progress

      - name: Build Docker image
        run: docker build -t springboot-app .

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Push Docker Image
        run: |
          docker tag springboot-app:latest $ECR_URL:${{ github.sha }}
          docker tag springboot-app:latest $ECR_URL:latest
          docker push $ECR_URL:${{ github.sha }}
          docker push $ECR_URL:latest

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: target/*.jar

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        run: aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

      - name: Deploy Kubernetes Resources
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl set image deployment/springboot-app springboot-app=$ECR_URL:${{ github.sha }}
          kubectl rollout restart deployment/springboot-app
          kubectl rollout status deployment/springboot-app --timeout=300s
