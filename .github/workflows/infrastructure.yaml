name: Terraform EKS Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_S3_BUCKET: ${{ secrets.TF_STATE_S3_BUCKET }}
  TF_STATE_FILE_KEY: ${{ secrets.TF_STATE_FILE_KEY }}
  TF_STATE_DYNAMODB_TABLE: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
  S3_AWS_REGION: ${{ secrets.S3_AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}  # Add your AWS account ID as a secret

jobs:
  terraform:
    name: Terraform Deploy to EKS
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init with S3 Backend
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_S3_BUCKET}" \
            -backend-config="key=${TF_STATE_FILE_KEY}" \
            -backend-config="region=${S3_AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_DYNAMODB_TABLE}"

      - name: Import Existing IAM Role if it Exists
        run: |
          terraform import aws_iam_role.eks_master_role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/eks_master_role || echo "No existing IAM role found, creating a new one."

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
